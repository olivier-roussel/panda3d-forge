From 5aacc68fea6ef3d0f3a12e46390ef7f9b0864376 Mon Sep 17 00:00:00 2001
From: Olivier Roussel <olivier.roussel@inria.fr>
Date: Wed, 30 Apr 2025 11:43:04 +0200
Subject: [PATCH] fix invalid inline expansion with clang-cl

---
 dtool/src/dtoolbase/dtoolbase.h | 18 +++++++++---------
 dtool/src/prc/configFlags.I     |  2 +-
 dtool/src/prc/configFlags.h     |  4 ++--
 3 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/dtool/src/dtoolbase/dtoolbase.h b/dtool/src/dtoolbase/dtoolbase.h
index d89caf2a92..7f289933e5 100644
--- a/dtool/src/dtoolbase/dtoolbase.h
+++ b/dtool/src/dtoolbase/dtoolbase.h
@@ -504,15 +504,15 @@ typedef struct _object PyObject;
 #if defined(CPPPARSER) || defined(LINK_ALL_STATIC)
 #define EXPORT_TEMPL
 #define IMPORT_TEMPL
-#elif defined(_MSC_VER)
-/* Nowadays, we'd define both of these as "extern" in all cases, so that
-   the header file always marks the symbol as "extern" and the .cxx file
-   explicitly instantiates it.  However, MSVC versions before 2013 break
-   the spec by explicitly disallowing it, so we have to instantiate the
-   class from the header file.  Fortunately, its linker is okay with the
-   duplicate template instantiations that this causes. */
-#define EXPORT_TEMPL
-#define IMPORT_TEMPL extern
+// #elif defined(_MSC_VER)
+// /* Nowadays, we'd define both of these as "extern" in all cases, so that
+//    the header file always marks the symbol as "extern" and the .cxx file
+//    explicitly instantiates it.  However, MSVC versions before 2013 break
+//    the spec by explicitly disallowing it, so we have to instantiate the
+//    class from the header file.  Fortunately, its linker is okay with the
+//    duplicate template instantiations that this causes. */
+// #define EXPORT_TEMPL
+// #define IMPORT_TEMPL extern
 #else
 #define EXPORT_TEMPL extern
 #define IMPORT_TEMPL extern
diff --git a/dtool/src/prc/configFlags.I b/dtool/src/prc/configFlags.I
index 6f35c4d814..295bdb3c26 100644
--- a/dtool/src/prc/configFlags.I
+++ b/dtool/src/prc/configFlags.I
@@ -16,7 +16,7 @@
  * comparison of the supplied local_modified value with the global_modified
  * value).
  */
-ALWAYS_INLINE bool ConfigFlags::
+INLINE bool ConfigFlags::
 is_cache_valid(AtomicAdjust::Integer local_modified) {
   return local_modified == _global_modified;
 }
diff --git a/dtool/src/prc/configFlags.h b/dtool/src/prc/configFlags.h
index f4b95757d6..e2be364c9a 100644
--- a/dtool/src/prc/configFlags.h
+++ b/dtool/src/prc/configFlags.h
@@ -57,13 +57,13 @@ PUBLISHED:
     F_dconfig           = 0x00008000,
   };
 
-protected:
+public:
   ALWAYS_INLINE static bool is_cache_valid(AtomicAdjust::Integer local_modified);
   ALWAYS_INLINE static void mark_cache_valid(AtomicAdjust::Integer &local_modified);
   INLINE static AtomicAdjust::Integer initial_invalid_cache();
   INLINE static void invalidate_cache();
 
-private:
+public:
   static TVOLATILE AtomicAdjust::Integer _global_modified;
 };
 
-- 
2.34.1

