From 3eae69565f8c513c1cffb274abc8cab06ec2685e Mon Sep 17 00:00:00 2001
From: Olivier Roussel <olivier.roussel@inria.fr>
Date: Wed, 30 Apr 2025 15:30:01 +0200
Subject: [PATCH] fix invalid inline expansion with clang-cl v2

---
 dtool/src/prc/configFlags.I |  4 ++--
 dtool/src/prc/configFlags.h | 10 ++++++++--
 2 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/dtool/src/prc/configFlags.I b/dtool/src/prc/configFlags.I
index 6f35c4d814..a975f803a9 100644
--- a/dtool/src/prc/configFlags.I
+++ b/dtool/src/prc/configFlags.I
@@ -16,7 +16,7 @@
  * comparison of the supplied local_modified value with the global_modified
  * value).
  */
-ALWAYS_INLINE bool ConfigFlags::
+INLINE bool ConfigFlags::
 is_cache_valid(AtomicAdjust::Integer local_modified) {
   return local_modified == _global_modified;
 }
@@ -25,7 +25,7 @@ is_cache_valid(AtomicAdjust::Integer local_modified) {
  * Updates the indicated local_modified value so that the cache will appear to
  * be valid, until someone next calls invalidate_cache().
  */
-ALWAYS_INLINE void ConfigFlags::
+INLINE void ConfigFlags::
 mark_cache_valid(AtomicAdjust::Integer &local_modified) {
   local_modified = _global_modified;
 }
diff --git a/dtool/src/prc/configFlags.h b/dtool/src/prc/configFlags.h
index f4b95757d6..75d143c2c5 100644
--- a/dtool/src/prc/configFlags.h
+++ b/dtool/src/prc/configFlags.h
@@ -57,9 +57,15 @@ PUBLISHED:
     F_dconfig           = 0x00008000,
   };
 
+public:
+  // This method is only defined to expose symbols for private _global_modified variable,
+  // otherwise compilers such Clang-cl would not create symbols as it is private and its 
+  // accessors are protected
+  INLINE static AtomicAdjust::Integer expose_global_modified() { return _global_modified; }
+
 protected:
-  ALWAYS_INLINE static bool is_cache_valid(AtomicAdjust::Integer local_modified);
-  ALWAYS_INLINE static void mark_cache_valid(AtomicAdjust::Integer &local_modified);
+  INLINE static bool is_cache_valid(AtomicAdjust::Integer local_modified);
+  INLINE static void mark_cache_valid(AtomicAdjust::Integer &local_modified);
   INLINE static AtomicAdjust::Integer initial_invalid_cache();
   INLINE static void invalidate_cache();
 
-- 
2.34.1

